-Last Class Summary
- Appointment Shceduler Problem
- Binary Search Tree

Even in the midterm, and in the review I talked about the coding problems

- BST: Possible Case
1 2 3 4 5 6 7 8 9 ...
Height of the tree: n Complexity: O(n)

Regular BST
- h = height of Tree
- Complexity
  - Searching is O(h)
  - Deleting is O(h)


Example of Best Case
-Somewhat balanced
- Other Somewhat balanced Trees
- AVL Tree, O(n)
- AVL Tree - For any node, the height difference between left and right-subtrees is at most 1
- it can be 0, in that case it would be somewhat balanced
- the balance factor of a node in an AVL tree is defined as:
Balanced Factor = Height of Leftsubtree - Height of Right subtree
- For an AVL ree, this balance factor must always be -1, 0 or 1

- Balancing (aka Rotation)
- Rotations are the baseic tree-restructuring operation for almost all balanced search trees
- wont violate the binary search tree poperty
- whenever the balanced factor is 2 or -2, then we need to do rotations to balance the tree

Insertion in AVL Tree
-Perform the normal BST insertion
- Starting from the new node, travel up and find the first unbalanced node
- Perform appropriate rotations

-We start at the root, and compare it to the value we are looking for, is the value bigger or smaller than the first parent
node that will tell us where it goes, to the left or right



